% Generated by roxygen2 (4.0.2): do not edit by hand
\name{likfit}
\alias{likfit}
\title{Fit a cost-based variogram model}
\usage{
likfit(geodata, coords = geodata$coords, data = geodata$data,
  trend = "cte", ini.cov.pars, fix.nugget = FALSE, nugget = 0,
  fix.kappa = TRUE, kappa = 0.5, fix.lambda = TRUE, lambda = 1,
  fix.psiA = TRUE, psiA = 0, fix.psiR = TRUE, psiR = 1, cov.model,
  realisations, lik.method = "ML", components = TRUE, nospatial = TRUE,
  limits = pars.limits(), dists.mat, print.pars = FALSE, messages, ...)
}
\description{
All the arguments work as in \code{\link[geoR]{likfit}}, except the
additional argument \code{dists.mat}, which takes a symmetric matrix of
distances between observation locations
}
\examples{
## geodata structure with transformed covariates
data(noise)
covarnames=sapply(1:3, function(x) paste("d2TV", x, sep=""))
obs.df <- data.frame(Leq=obs$Leq,
                     1/(1+(as.data.frame(obs)[covarnames]/20)^2))
obs.gd <- as.geodata(cbind(coordinates(obs), obs.df),
                     data.col="Leq",
                     covar.col=c('d2TV1','d2TV2','d2TV3'))
trend=~d2TV1*(d2TV2+d2TV3)

## compute euclidean and cost-based empirical variograms
vg.std <- variog(obs.gd, trend=trend)
vg.dmat <- variog(obs.gd, trend=trend, dists.mat=dd.distmat)

## fitting variogram models
vgmdl.std  <- likfit(geodata = obs.gd, trend=trend,
                     ini = c(8,300), cov.model = "matern")
vgmdl.dmat <- likfit(geodata = obs.gd, trend=trend,
                     ini = c(8,300), cov.model = "matern",
                     dists.mat=dd.distmat)

## Fitted parameters
data.frame(
  parameters=c("tausq","sigmasq","phi"),
  Euclidean=c(round(vgmdl.std$tausq,2),round(vgmdl.std$sigmasq,2),round(vgmdl.std$phi,0)),
  Cost_based=c(round(vgmdl.dmat$tausq,2),round(vgmdl.dmat$sigmasq,2),round(vgmdl.dmat$phi,0)))

## practical range
## defined as the value for which the correlation function
## decays to 5\% of its value at 0
x=seq(0,800)
y=cov.spatial(x,cov.pars=vgmdl.std$cov.pars)
min(x[y<0.05*y[1]])    # 358
y=cov.spatial(x,cov.pars=vgmdl.dmat$cov.pars)
min(x[y<0.05*y[1]])    # 502
# Note that the cost-based  analysis detects a
# longer-ranged correlation structure

## plotting and comparing empirical variograms
## (with classical and robust estimation)
## and fitted variogram models
op <- par(mfrow=c(2,2))
u = 13  # binning
for( est in c('classical','modulus') )
{
  vg.std <- variog(obs.gd, trend=trend, estimator.type=est, uvec=u)
  vg.dmat <- variog(obs.gd, trend=trend, dists.mat=dd.distmat, estimator.type=est, uvec=u)
  plot(vg.std,pch=20, cex=1.2, max.dist=max(vg.dmat$u), ylim=c(0,20), col='gray')
  lines(vg.std,pch=20, col='gray')
  lines(vg.dmat,pch=20,cex=2,col='red')
  legend('topleft',c('Euclidean','Cost'),lty=1,lwd=2,col=c('gray','red'))
  title(paste('binning:',u,'   estimator:',est))

  plot(vg.std, pch=20, cex=1.2, max.dist=800, col='gray')   # empirical standard
  lines(vgmdl.std,lwd=2,col='gray')         # fitted model standard
  points(as.data.frame(vg.dmat[c(1,2)]),pch=20,cex=2,col='red')   # empirical cost-based
  lines(vgmdl.dmat,lwd=2,col='darkred')             # fitted model cost-based
  legend('topleft',c('Euclidean','Cost'),lty=1,lwd=2,col=c('gray','red'))
  title(paste('binning:',u,'   estimator:',est))
}
par(op)
}

